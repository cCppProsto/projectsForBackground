#include "rus_font.hpp"

// u'А'-------------------------------------------------------------------------
static auto rus_A_size {std::make_pair(11, 12)};
static uint8_t rus_A_border[12*2] =
{
  0b01111011,0b11000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b01000000,
  0b01100100,0b11000000,
  0b00100100,0b10000000,
  0b00100100,0b10000000,
  0b00100100,0b10000000,
  0b00110001,0b10000000,
  0b00010001,0b00000000,
  0b00011111,0b00000000,
  0b00000000,0b00000000
};
static uint8_t rus_A[12*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b10000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00001110,0b00000000,
  0b00001110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'а'
static auto rus_a_size {std::make_pair(10, 12)};
static uint8_t rus_a_border[12*2] =
{
  0b00011111,0b11000000,
  0b00110000,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00110000,0b01000000,
  0b00011110,0b01000000,
  0b00010000,0b11000000,
  0b00011111,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};
static uint8_t rus_a[12*2] =
{
  0b00000000,0b00000000,
  0b00001111,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00001111,0b10000000,
  0b00000001,0b10000000,
  0b00001111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Б'-------------------------------------------------------------------------
static auto rus_B_size {std::make_pair(11, 12)};
static uint8_t rus_B_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b11000000,
  0b01001110,0b01000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b11000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01111111,0b10000000,
  0b00000000,0b00000000
};
static uint8_t rus_B[12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'б'
static auto rus_b_size {std::make_pair(10, 12)};
static uint8_t rus_b_border[12*2] =
{
  0b00111111,0b00000000,
  0b01100001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01001111,0b00000000,
  0b01100111,0b10000000,
  0b00110000,0b10000000,
  0b00011111,0b10000000
};

static uint8_t rus_b[12*2] =
{
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00110000,0b00000000,
  0b00011000,0b00000000,
  0b00001111,0b00000000,
  0b00000000,0b00000000
};

// u'В'-------------------------------------------------------------------------
static auto rus_V_size {std::make_pair(11, 12)};
static uint8_t rus_V_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b11000000,
  0b01001110,0b01000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b11000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_V [12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'в'-------------------------------------------------------------------------
static auto rus_v_size {std::make_pair(10, 12)};
static uint8_t rus_v_border[12*2] =
{
  0b01111111,0b00000000,
  0b01000001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_v [12*2] =
{
  0b00000000,0b00000000,
  0b00111110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'Г'-------------------------------------------------------------------------
static auto rus_G_size {std::make_pair(11, 12)};
static uint8_t rus_G_border[12*2] =
{
  0b01111000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001111,0b11000000,
  0b01000000,0b01000000,
  0b01111111,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_G [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'г'-------------------------------------------------------------------------
static auto rus_g_size {std::make_pair(9, 12)};
static uint8_t rus_g_border[12*2] =
{
  0b01111000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001111,0b00000000,
  0b01000001,0b00000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_g [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u' '-------------------------------------------------------------------------
static auto rus_D_size {std::make_pair(11, 13)};
static uint8_t rus_D_border[13*2] =
{
  0b11110001,0b11100000,
  0b10010001,0b00100000,
  0b10011111,0b00100000,
  0b10000000,0b00100000,
  0b11001110,0b01100000,
  0b01001110,0b01000000,
  0b01100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100000,0b01000000,
  0b00111111,0b11000000
};

static uint8_t rus_D [13*2] =
{
  0b00000000,0b00000000,
  0b01100000,0b11000000,
  0b01100000,0b11000000,
  0b01111111,0b11000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011111,0b10000000,
  0b00000000,0b00000000
};

// u'д'-------------------------------------------------------------------------
static auto rus_d_size {std::make_pair(12, 12)};
static uint8_t rus_d_border[12*2] =
{
  0b01111001,0b11100000,
  0b01001001,0b00100000,
  0b01001111,0b00100000,
  0b01000000,0b00100000,
  0b01100110,0b01100000,
  0b00100110,0b01000000,
  0b00110010,0b01000000,
  0b00010010,0b01000000,
  0b00010010,0b01000000,
  0b00010000,0b01000000,
  0b00011111,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_d [12*2] =
{
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Е'-------------------------------------------------------------------------
static auto rus_E_size {std::make_pair(10, 12)};
static uint8_t rus_E_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b10000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01111111,0b10000000,
  0b00000000,0b00000000
};

static uint8_t rus_E [12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'е'-------------------------------------------------------------------------
static auto rus_e_size {std::make_pair(10, 12)};
static uint8_t rus_e_border[12*2] =
{
  0b00111111,0b00000000,
  0b01100001,0b10000000,
  0b01001110,0b10000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01100001,0b10000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_e [12*2] =
{
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00110001,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00011110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

/*
// u' '-------------------------------------------------------------------------
static auto rus_ _size {std::make_pair(0, 0)};
static uint8_t rus_ _border[12*2] =
{
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_ [12*2] =
{
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

*/

//------------------------------------------------------------------------------
rusFont::rusFont()
{
}
//------------------------------------------------------------------------------
rusFont &rusFont::instance()
{
  static rusFont res;
  return res;
}
//------------------------------------------------------------------------------
const uint8_t *rusFont::getBorderBitmap(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A_border;
    case u'а':  return rus_a_border;
    case u'Б':  return rus_B_border;
    case u'б':  return rus_b_border;
    case u'В':  return rus_V_border;
    case u'в':  return rus_v_border;
    case u'Г':  return rus_G_border;
    case u'г':  return rus_g_border;
    case u'Д':  return rus_D_border;
    case u'д':  return rus_d_border;
    case u'Е':  return rus_E_border;
    case u'е':  return rus_e_border;
  }
  return nullptr;
}
//------------------------------------------------------------------------------
const uint8_t *rusFont::getCharBitmap(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A;
    case u'а':  return rus_a;
    case u'Б':  return rus_B;
    case u'б':  return rus_b;
    case u'В':  return rus_V;
    case u'в':  return rus_v;
    case u'Г':  return rus_G;
    case u'г':  return rus_g;
    case u'Д':  return rus_D;
    case u'д':  return rus_d;
    case u'Е':  return rus_E;
    case u'е':  return rus_e;
  }
  return nullptr;
}
//------------------------------------------------------------------------------

const std::pair<int, int> rusFont::getCharSize(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A_size;
    case u'а':  return rus_a_size;
    case u'Б':  return rus_B_size;
    case u'б':  return rus_b_size;
    case u'В':  return rus_V_size;
    case u'в':  return rus_v_size;
    case u'Г':  return rus_G_size;
    case u'г':  return rus_g_size;
    case u'Д':  return rus_D_size;
    case u'д':  return rus_d_size;
    case u'Е':  return rus_E_size;
    case u'е':  return rus_e_size;
  }
  return std::make_pair(0,0);
}


