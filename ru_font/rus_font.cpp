#include "rus_font.hpp"

// u'А'-------------------------------------------------------------------------
static auto rus_A_size {std::make_pair(11, 12)};
static uint8_t rus_A_border[12*2] =
{
  0b01111011,0b11000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b01000000,
  0b01100100,0b11000000,
  0b00100100,0b10000000,
  0b00100100,0b10000000,
  0b00100100,0b10000000,
  0b00110001,0b10000000,
  0b00010001,0b00000000,
  0b00011111,0b00000000,
  0b00000000,0b00000000
};
static uint8_t rus_A[12*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b10000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00011011,0b00000000,
  0b00001110,0b00000000,
  0b00001110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'а'
static auto rus_a_size {std::make_pair(10, 12)};
static uint8_t rus_a_border[12*2] =
{
  0b00011111,0b11000000,
  0b00110000,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00110000,0b01000000,
  0b00011110,0b01000000,
  0b00010000,0b11000000,
  0b00011111,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};
static uint8_t rus_a[12*2] =
{
  0b00000000,0b00000000,
  0b00001111,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00001111,0b10000000,
  0b00000001,0b10000000,
  0b00001111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Б'-------------------------------------------------------------------------
static auto rus_B_size {std::make_pair(11, 12)};
static uint8_t rus_B_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b11000000,
  0b01001110,0b01000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b11000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01111111,0b10000000,
  0b00000000,0b00000000
};
static uint8_t rus_B[12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'б'
static auto rus_b_size {std::make_pair(10, 12)};
static uint8_t rus_b_border[12*2] =
{
  0b00111111,0b00000000,
  0b01100001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01001111,0b00000000,
  0b01100111,0b10000000,
  0b00110000,0b10000000,
  0b00011111,0b10000000
};

static uint8_t rus_b[12*2] =
{
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00110000,0b00000000,
  0b00011000,0b00000000,
  0b00001111,0b00000000,
  0b00000000,0b00000000
};

// u'В'-------------------------------------------------------------------------
static auto rus_V_size {std::make_pair(11, 12)};
static uint8_t rus_V_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b11000000,
  0b01001110,0b01000000,
  0b01001010,0b01000000,
  0b01001110,0b01000000,
  0b01000000,0b11000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_V [12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00111111,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'в'-------------------------------------------------------------------------
static auto rus_v_size {std::make_pair(10, 12)};
static uint8_t rus_v_border[12*2] =
{
  0b01111111,0b00000000,
  0b01000001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01000001,0b10000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_v [12*2] =
{
  0b00000000,0b00000000,
  0b00111110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'Г'-------------------------------------------------------------------------
static auto rus_G_size {std::make_pair(11, 12)};
static uint8_t rus_G_border[12*2] =
{
  0b01111000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001111,0b11000000,
  0b01000000,0b01000000,
  0b01111111,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_G [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'г'-------------------------------------------------------------------------
static auto rus_g_size {std::make_pair(9, 12)};
static uint8_t rus_g_border[12*2] =
{
  0b01111000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001000,0b00000000,
  0b01001111,0b00000000,
  0b01000001,0b00000000,
  0b01111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_g [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u' '-------------------------------------------------------------------------
static auto rus_D_size {std::make_pair(11, 13)};
static uint8_t rus_D_border[13*2] =
{
  0b11110001,0b11100000,
  0b10010001,0b00100000,
  0b10011111,0b00100000,
  0b10000000,0b00100000,
  0b11001110,0b01100000,
  0b01001110,0b01000000,
  0b01100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100110,0b01000000,
  0b00100000,0b01000000,
  0b00111111,0b11000000
};

static uint8_t rus_D [13*2] =
{
  0b00000000,0b00000000,
  0b01100000,0b11000000,
  0b01100000,0b11000000,
  0b01111111,0b11000000,
  0b00110001,0b10000000,
  0b00110001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00011111,0b10000000,
  0b00000000,0b00000000
};

// u'д'-------------------------------------------------------------------------
static auto rus_d_size {std::make_pair(12, 12)};
static uint8_t rus_d_border[12*2] =
{
  0b01111001,0b11100000,
  0b01001001,0b00100000,
  0b01001111,0b00100000,
  0b01000000,0b00100000,
  0b01100110,0b01100000,
  0b00100110,0b01000000,
  0b00110010,0b01000000,
  0b00010010,0b01000000,
  0b00010010,0b01000000,
  0b00010000,0b01000000,
  0b00011111,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_d [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b11000000,
  0b00110000,0b11000000,
  0b00111111,0b11000000,
  0b00011001,0b10000000,
  0b00011001,0b10000000,
  0b00001101,0b10000000,
  0b00001101,0b10000000,
  0b00001101,0b10000000,
  0b00001111,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Е'-------------------------------------------------------------------------
static auto rus_E_size {std::make_pair(12, 12)};
static uint8_t rus_E_border[12*2] =
{
  0b01111111,0b10000000,
  0b01000000,0b10000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01001111,0b10000000,
  0b01001000,0b00000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01111111,0b10000000,
  0b00000000,0b00000000
};

static uint8_t rus_E [12*2] =
{
  0b00000000,0b00000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'е'-------------------------------------------------------------------------
static auto rus_e_size {std::make_pair(10, 10)};
static uint8_t rus_e_border[10*2] =
{
  0b00111111,0b00000000,
  0b01100001,0b10000000,
  0b01001110,0b10000000,
  0b01001111,0b10000000,
  0b01000000,0b10000000,
  0b01001100,0b10000000,
  0b01001100,0b10000000,
  0b01100001,0b10000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_e [10*2] =
{
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00110001,0b00000000,
  0b00110000,0b00000000,
  0b00111111,0b00000000,
  0b00110011,0b00000000,
  0b00110011,0b00000000,
  0b00011110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Ж'-------------------------------------------------------------------------
static auto rus_ZH_size {std::make_pair(16, 12)};
static uint8_t rus_ZH_border[12*2] =
{
  0b01111011,0b11011110,
  0b01001110,0b01110010,
  0b01100110,0b01100110,
  0b00110010,0b01001100,
  0b00011000,0b00011000,
  0b00011000,0b00011000,
  0b00010010,0b01001000,
  0b01110110,0b01101110,
  0b01000110,0b01100010,
  0b01001110,0b01110010,
  0b01111011,0b11011110,
  0b00000000,0b00000000
};

static uint8_t rus_ZH [12*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10001100,
  0b00011001,0b10011000,
  0b00001101,0b10110000,
  0b00000111,0b11100000,
  0b00000111,0b11100000,
  0b00001101,0b10110000,
  0b00001001,0b10010000,
  0b00111001,0b10011100,
  0b00110001,0b10001100,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'ж'-------------------------------------------------------------------------
static auto rus_zh_size {std::make_pair(16, 10)};
static uint8_t rus_zh_border[10*2] =
{
  0b01111011,0b11011110,
  0b01001110,0b01110010,
  0b01100110,0b01100110,
  0b00110010,0b01001100,
  0b00011000,0b00011000,
  0b00010010,0b01001000,
  0b00110010,0b01001100,
  0b00100110,0b01100100,
  0b00111111,0b11111100,
  0b00000000,0b00000000
};

static uint8_t rus_zh [10*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10001100,
  0b00011001,0b10011000,
  0b00001101,0b10110000,
  0b00000111,0b11100000,
  0b00001101,0b10110000,
  0b00001101,0b10110000,
  0b00011001,0b10011000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'З'-------------------------------------------------------------------------
static auto rus_Z_size {std::make_pair(10, 12)};
static uint8_t rus_Z_border[12*2] =
{
  0b00111111,0b00000000,
  0b01100001,0b10000000,
  0b01011100,0b10000000,
  0b01110100,0b10000000,
  0b00111100,0b10000000,
  0b00100001,0b10000000,
  0b00111100,0b10000000,
  0b01110100,0b10000000,
  0b01011100,0b10000000,
  0b01100001,0b10000000,
  0b00111111,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_Z [12*2] =
{
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00100011,0b00000000,
  0b00000011,0b00000000,
  0b00000011,0b00000000,
  0b00011110,0b00000000,
  0b00000011,0b00000000,
  0b00000011,0b00000000,
  0b00100011,0b00000000,
  0b00011110,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'з'-------------------------------------------------------------------------
static auto rus_z_size {std::make_pair(9, 10)};
static uint8_t rus_z_border[10*2] =
{
  0b01111110,0b00000000,
  0b01000011,0b00000000,
  0b01111001,0b00000000,
  0b00111001,0b00000000,
  0b00100011,0b00000000,
  0b00111001,0b00000000,
  0b01111001,0b00000000,
  0b01000011,0b00000000,
  0b01111110,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_z [10*2] =
{
  0b00000000,0b00000000,
  0b00111100,0b00000000,
  0b00000110,0b00000000,
  0b00000110,0b00000000,
  0b00011100,0b00000000,
  0b00000110,0b00000000,
  0b00000110,0b00000000,
  0b00111100,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'И'-------------------------------------------------------------------------
static auto rus_I_size {std::make_pair(12, 12)};
static uint8_t rus_I_border[12*2] =
{
  0b01111000,0b11100000,
  0b01001100,0b10100000,
  0b01000110,0b10100000,
  0b01010010,0b10100000,
  0b01010011,0b10100000,
  0b01011001,0b10100000,
  0b01011100,0b10100000,
  0b01010100,0b10100000,
  0b01010110,0b00100000,
  0b01010011,0b00100000,
  0b01110001,0b11100000,
  0b00000000,0b00000000
};

static uint8_t rus_I [12*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b01000000,
  0b00111000,0b01000000,
  0b00101100,0b01000000,
  0b00101100,0b01000000,
  0b00100110,0b01000000,
  0b00100011,0b01000000,
  0b00100011,0b01000000,
  0b00100001,0b11000000,
  0b00100000,0b11000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u' '-------------------------------------------------------------------------
static auto rus_i_size {std::make_pair(10, 10)};
static uint8_t rus_i_border[10*2] =
{
  0b01110011,0b10000000,
  0b01011010,0b10000000,
  0b01001110,0b10000000,
  0b01000110,0b10000000,
  0b01010010,0b10000000,
  0b01011000,0b10000000,
  0b01011100,0b10000000,
  0b01010110,0b10000000,
  0b01110011,0b10000000,
  0b00000000,0b00000000
};

static uint8_t rus_i [10*2] =
{
  0b00000000,0b00000000,
  0b00100001,0b00000000,
  0b00110001,0b00000000,
  0b00111001,0b00000000,
  0b00101101,0b00000000,
  0b00100111,0b00000000,
  0b00100011,0b00000000,
  0b00100001,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Й'-------------------------------------------------------------------------
static auto rus_J_size {std::make_pair(12, 15)};
static uint8_t rus_J_border[15*2] =
{
  0b01111000,0b11100000,
  0b01001100,0b10100000,
  0b01000110,0b10100000,
  0b01010010,0b10100000,
  0b01010011,0b10100000,
  0b01011001,0b10100000,
  0b01011100,0b10100000,
  0b01010100,0b10100000,
  0b01010110,0b00100000,
  0b01010011,0b00100000,
  0b01111111,0b11100000,
  0b00110000,0b11000000,
  0b00100110,0b01000000,
  0b00111111,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_J [15*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b01000000,
  0b00111000,0b01000000,
  0b00101100,0b01000000,
  0b00101100,0b01000000,
  0b00100110,0b01000000,
  0b00100011,0b01000000,
  0b00100011,0b01000000,
  0b00100001,0b11000000,
  0b00100000,0b11000000,
  0b00000000,0b00000000,
  0b00001111,0b00000000,
  0b00011001,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'й'-------------------------------------------------------------------------
static auto rus_j_size {std::make_pair(10, 13)};
static uint8_t rus_j_border[13*2] =
{
  0b01110011,0b10000000,
  0b01011010,0b10000000,
  0b01001110,0b10000000,
  0b01000110,0b10000000,
  0b01010010,0b10000000,
  0b01011000,0b10000000,
  0b01011100,0b10000000,
  0b01010110,0b10000000,
  0b01111111,0b10000000,
  0b01100001,0b10000000,
  0b01001100,0b10000000,
  0b01111111,0b10000000
};

static uint8_t rus_j [13*2] =
{
  0b00000000,0b00000000,
  0b00100000,0b00000000,
  0b00110000,0b00000000,
  0b00111000,0b00000000,
  0b00101100,0b00000000,
  0b00100111,0b00000000,
  0b00100011,0b00000000,
  0b00100001,0b00000000,
  0b00000000,0b00000000,
  0b00011110,0b00000000,
  0b00110011,0b00000000,
  0b00000000,0b00000000
};

// u'К'-------------------------------------------------------------------------
static auto rus_K_size {std::make_pair(11, 12)};
static uint8_t rus_K_border[12*2] =
{
  0b01111011,0b11000000,
  0b01001110,0b01000000,
  0b01001100,0b11000000,
  0b01001001,0b10000000,
  0b01000011,0b00000000,
  0b01000011,0b00000000,
  0b01001001,0b00000000,
  0b01001101,0b11000000,
  0b01001100,0b01000000,
  0b01001110,0b01000000,
  0b01111011,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_K [12*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10000000,
  0b00110011,0b00000000,
  0b00110110,0b00000000,
  0b00111100,0b00000000,
  0b00111100,0b00000000,
  0b00110110,0b00000000,
  0b00110010,0b00000000,
  0b00110011,0b10000000,
  0b00110001,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u' '-------------------------------------------------------------------------
static auto rus_k_size {std::make_pair(10, 10)};
static uint8_t rus_k_border[10*2] =
{
  0b01111011,0b11000000,
  0b01001110,0b01000000,
  0b01001100,0b11000000,
  0b01001001,0b10000000,
  0b01000011,0b00000000,
  0b01001011,0b10000000,
  0b01001000,0b10000000,
  0b01001100,0b10000000,
  0b01111111,0b10000000,
  0b00000000,0b00000000
};

static uint8_t rus_k [10*2] =
{
  0b00000000,0b00000000,
  0b00110001,0b10000000,
  0b00110011,0b00000000,
  0b00110110,0b00000000,
  0b00111100,0b00000000,
  0b00110100,0b00000000,
  0b00110111,0b00000000,
  0b00110011,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'Л'-------------------------------------------------------------------------
static auto rus_L_size {std::make_pair(13, 12)};
static uint8_t rus_L_border[12*2] =
{
  0b01111000,0b11110000,
  0b01001100,0b10010000,
  0b01100110,0b10010000,
  0b00110010,0b10010000,
  0b00010010,0b10010000,
  0b00010010,0b10010000,
  0b00010010,0b10010000,
  0b00010010,0b10010000,
  0b00010011,0b10010000,
  0b00010000,0b00010000,
  0b00011111,0b11110000,
  0b00000000,0b00000000
};

static uint8_t rus_L [12*2] =
{
  0b00000000,0b0000000,
  0b00110000,0b01100000,
  0b00011000,0b01100000,
  0b00001100,0b01100000,
  0b00001100,0b01100000,
  0b00001100,0b01100000,
  0b00001100,0b01100000,
  0b00001100,0b01100000,
  0b00001100,0b01100000,
  0b00001111,0b11100000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

// u'л'-------------------------------------------------------------------------
static auto rus_l_size {std::make_pair(12, 10)};
static uint8_t rus_l_border[10*2] =
{
  0b01111001,0b11100000,
  0b01001101,0b00100000,
  0b01100111,0b00100000,
  0b00110011,0b00100000,
  0b00010011,0b00100000,
  0b00010011,0b00100000,
  0b00010011,0b00100000,
  0b00010000,0b00100000,
  0b00011111,0b11100000,
  0b00000000,0b00000000
};

static uint8_t rus_l [10*2] =
{
  0b00000000,0b00000000,
  0b00110000,0b11000000,
  0b00011000,0b11000000,
  0b00001100,0b11000000,
  0b00001100,0b11000000,
  0b00001100,0b11000000,
  0b00001100,0b11000000,
  0b00001111,0b11000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'М'-------------------------------------------------------------------------
static auto rus_M_size {std::make_pair(13, 12)};
static uint8_t rus_M_border[12*2] =
{
  0b01110000,0b11110000,
  0b01010000,0b10010000,
  0b01011111,0b10010000,
  0b01011001,0b10010000,
  0b01011001,0b10010000,
  0b01010010,0b10010000,
  0b01010010,0b10010000,
  0b01000111,0b00010000,
  0b01000101,0b00010000,
  0b01001101,0b10010000,
  0b01111000,0b11110000,
  0b00000000,0b00000000
};

static uint8_t rus_M [12*2] =
{
  0b00000000,0b00000000,
  0b00100000,0b01100000,
  0b00100000,0b01100000,
  0b00100110,0b01100000,
  0b00100110,0b01100000,
  0b00101101,0b01100000,
  0b00101101,0b01100000,
  0b00111000,0b11100000,
  0b00111000,0b11100000,
  0b00110000,0b01100000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};


// u'м'-------------------------------------------------------------------------
static auto rus_m_size {std::make_pair(11, 10)};
static uint8_t rus_m_border[10*2] =
{
  0b01110011,0b11000000,
  0b01010010,0b01000000,
  0b01011110,0b01000000,
  0b01010010,0b01000000,
  0b01010010,0b01000000,
  0b01000010,0b01000000,
  0b01001100,0b01000000,
  0b01001110,0b01000000,
  0b01111011,0b11000000,
  0b00000000,0b00000000
};

static uint8_t rus_m [10*2] =
{
  0b00000000,0b00000000,
  0b00100001,0b10000000,
  0b00100001,0b10000000,
  0b00101101,0b10000000,
  0b00101101,0b10000000,
  0b00111101,0b10000000,
  0b00110011,0b10000000,
  0b00110001,0b10000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

/*
// u' '-------------------------------------------------------------------------
static auto rus_ _size {std::make_pair(0, 0)};
static uint8_t rus_ _border[12*2] =
{
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

static uint8_t rus_ [12*2] =
{
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000,
  0b00000000,0b00000000
};

*/

//------------------------------------------------------------------------------
rusFont::rusFont()
{
}
//------------------------------------------------------------------------------
rusFont &rusFont::instance()
{
  static rusFont res;
  return res;
}
//------------------------------------------------------------------------------
const uint8_t *rusFont::getBorderBitmap(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A_border;
    case u'а':  return rus_a_border;
    case u'Б':  return rus_B_border;
    case u'б':  return rus_b_border;
    case u'В':  return rus_V_border;
    case u'в':  return rus_v_border;
    case u'Г':  return rus_G_border;
    case u'г':  return rus_g_border;
    case u'Д':  return rus_D_border;
    case u'д':  return rus_d_border;
    case u'Е':  return rus_E_border;
    case u'е':  return rus_e_border;
    case u'Ж':  return rus_ZH_border;
    case u'ж':  return rus_zh_border;
    case u'З':  return rus_Z_border;
    case u'з':  return rus_z_border;
    case u'И':  return rus_I_border;
    case u'и':  return rus_i_border;
    case u'Й':  return rus_J_border;
    case u'й':  return rus_j_border;
    case u'К':  return rus_K_border;
    case u'к':  return rus_k_border;
    case u'Л':  return rus_L_border;
    case u'л':  return rus_l_border;
    case u'М':  return rus_M_border;
    case u'м':  return rus_m_border;
  }
  return nullptr;
}
//------------------------------------------------------------------------------
const uint8_t *rusFont::getCharBitmap(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A;
    case u'а':  return rus_a;
    case u'Б':  return rus_B;
    case u'б':  return rus_b;
    case u'В':  return rus_V;
    case u'в':  return rus_v;
    case u'Г':  return rus_G;
    case u'г':  return rus_g;
    case u'Д':  return rus_D;
    case u'д':  return rus_d;
    case u'Е':  return rus_E;
    case u'е':  return rus_e;
    case u'Ж':  return rus_ZH;
    case u'ж':  return rus_zh;
    case u'З':  return rus_Z;
    case u'з':  return rus_z;
    case u'И':  return rus_I;
    case u'и':  return rus_i;
    case u'Й':  return rus_J;
    case u'й':  return rus_j;
    case u'К':  return rus_K;
    case u'к':  return rus_k;
    case u'Л':  return rus_L;
    case u'л':  return rus_l;
    case u'М':  return rus_M;
    case u'м':  return rus_m;
  }
  return nullptr;
}
//------------------------------------------------------------------------------

const std::pair<int, int> rusFont::getCharSize(char16_t ch)
{
  switch (ch)
  {
    case u'А':  return rus_A_size;
    case u'а':  return rus_a_size;
    case u'Б':  return rus_B_size;
    case u'б':  return rus_b_size;
    case u'В':  return rus_V_size;
    case u'в':  return rus_v_size;
    case u'Г':  return rus_G_size;
    case u'г':  return rus_g_size;
    case u'Д':  return rus_D_size;
    case u'д':  return rus_d_size;
    case u'Е':  return rus_E_size;
    case u'е':  return rus_e_size;
    case u'Ж':  return rus_ZH_size;
    case u'ж':  return rus_zh_size;
    case u'З':  return rus_Z_size;
    case u'з':  return rus_z_size;
    case u'И':  return rus_I_size;
    case u'и':  return rus_i_size;
    case u'Й':  return rus_J_size;
    case u'й':  return rus_j_size;
    case u'К':  return rus_K_size;
    case u'к':  return rus_k_size;
    case u'Л':  return rus_L_size;
    case u'л':  return rus_l_size;
    case u'М':  return rus_M_size;
    case u'м':  return rus_m_size;
  }
  return std::make_pair(0,0);
}


